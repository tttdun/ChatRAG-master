from flask import Flask, render_template, request, jsonify
from RAG import RAGPipeline, DocumentStore, CustomEmbeddings
from RAG.retrieval import Document
from Reader.WordReader import WordReader  # ƒê·ªçc file Word
from Reader.PDFReader import PDFReader
from Reader.SheetReader import SheetReader
from dotenv import load_dotenv  # ƒê·ªÉ s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng
import os

# X·ª≠ l√Ω l·ªói th∆∞ vi·ªán ƒëa lu·ªìng
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"

# H√†m l·∫•y danh s√°ch c√°c t·ªáp t·ª´ th∆∞ m·ª•c
def get_file_paths_from_directory(directory, extensions=None):
    """
    Tr·∫£ v·ªÅ danh s√°ch ƒë∆∞·ªùng d·∫´n ƒë·∫øn c√°c t·ªáp trong th∆∞ m·ª•c, c√≥ th·ªÉ l·ªçc theo ph·∫ßn m·ªü r·ªông.
    :param directory: ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c.
    :param extensions: Danh s√°ch ph·∫ßn m·ªü r·ªông c·∫ßn l·ªçc (v√≠ d·ª•: [".docx", ".pdf"]).
    :return: Danh s√°ch ƒë∆∞·ªùng d·∫´n t·ªáp.
    """
    file_paths = []
    for root, _, files in os.walk(directory):
        for file in files:
            if not extensions or any(file.endswith(ext) for ext in extensions):
                file_paths.append(os.path.join(root, file))
    return file_paths

# Kh·ªüi t·∫°o Flask app
app = Flask(__name__, static_folder="static", template_folder="templates")

@app.route("/")
def index():
    """Trang ch·ªß hi·ªÉn th·ªã giao di·ªán chatbot."""
    return render_template("index.html")

@app.route("/ask", methods=["POST"])
def ask():
    """
    API nh·∫≠n c√¢u h·ªèi t·ª´ giao di·ªán v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t·ª´ pipeline.
    """
    data = request.json
    question = data.get("question", "").strip()

    if not question:
        return jsonify({"error": "C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."}), 400

    try:
        # Tr·∫£ l·ªùi c√¢u h·ªèi t·ª´ pipeline
        answer = rag_pipeline.answer_question(question)
        return jsonify({"question": question, "answer": answer})
    except Exception as e:
        return jsonify({"error": f"L·ªói x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}"}), 500

if __name__ == "__main__":
    # T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
    load_dotenv()

    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a t√†i li·ªáu
    directory_path = "doc"  # Thay ƒë·ªïi n·∫øu c·∫ßn
    extensions = [".docx", ".pdf", "xlsx"]  # C√≥ th·ªÉ th√™m c√°c ƒë·ªãnh d·∫°ng kh√°c n·∫øu c·∫ßn

    # T√¨m t·∫•t c·∫£ c√°c file ph√π h·ª£p trong th∆∞ m·ª•c
    file_paths = get_file_paths_from_directory(directory_path, extensions)
    if not file_paths:
        print("‚ùå Kh√¥ng t√¨m th·∫•y t√†i li·ªáu trong th∆∞ m·ª•c. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n ho·∫∑c ƒë·ªãnh d·∫°ng t·ªáp.")
        exit()

    # T·∫°o danh s√°ch sections t·ª´ c√°c t√†i li·ªáu
    sections = []
    try:
        # X·ª≠ l√Ω t√†i li·ªáu Word
        word_files = [f for f in file_paths if f.endswith(".docx")]
        if word_files:
            word_reader = WordReader(word_files)
            sections.extend(word_reader.process_documents())

        # X·ª≠ l√Ω t√†i li·ªáu PDF
        pdf_files = [f for f in file_paths if f.endswith(".pdf")]
        if pdf_files:
            pdf_reader = PDFReader(pdf_files)
            pdf_sections = pdf_reader.process_documents()
            sections.extend([doc.text for doc in pdf_sections])  # L·∫•y n·ªôi dung t·ª´ c√°c Document

        # X·ª≠ l√Ω t√†i li·ªáu Excel
        sheet_files = [f for f in file_paths if f.endswith(".xlsx")]
        if sheet_files:
            sheet_reader = SheetReader(sheet_files)
            sheet_sections = sheet_reader.process_documents()
            sections.extend([doc.text for doc in sheet_sections])  # L·∫•y n·ªôi dung t·ª´ c√°c Document

    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω t√†i li·ªáu: {str(e)}")
        exit()

    if not sections:
        print("‚ùå Kh√¥ng t√¨m th·∫•y n·ªôi dung trong c√°c t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p.")
        exit()

    print(f"‚úÖ ƒê√£ t·∫£i {len(sections)} ƒëo·∫°n n·ªôi dung t·ª´ t√†i li·ªáu.")

    # Chuy·ªÉn ƒë·ªïi c√°c section th√†nh ƒë·ªëi t∆∞·ª£ng Document
    documents = [Document(content=section) for section in sections]

    if not documents:
        print("‚ùå Kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·ªÉ ƒë∆∞a v√†o DocumentStore.")
        exit()

    print(f"‚úÖ ƒê√£ chu·∫©n b·ªã {len(documents)} t√†i li·ªáu ƒë·ªÉ l∆∞u tr·ªØ.")

    # Kh·ªüi t·∫°o m√¥ h√¨nh nh√∫ng t√πy ch·ªânh
    try:
        embedding_model = CustomEmbeddings()
    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi t·∫°o m√¥ h√¨nh nh√∫ng: {str(e)}")
        exit()

    # Kh·ªüi t·∫°o DocumentStore
    try:
        store = DocumentStore(documents, embedding_model)
    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi t·∫°o DocumentStore: {str(e)}")
        exit()

    # L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    api_key = os.getenv("OPENAI_KEY")
    if not api_key:
        print("‚ùå Thi·∫øu API key cho OpenAI. Vui l√≤ng thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng 'OPENAI_KEY'.")
        exit()

    # T·∫°o ƒë·ªëi t∆∞·ª£ng RAGPipeline
    try:
        rag_pipeline = RAGPipeline(documents=documents, api_key=api_key, model_name="gpt-3.5-turbo")
        print("‚úÖ RAG Pipeline kh·ªüi t·∫°o th√†nh c√¥ng.")
    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi t·∫°o RAG Pipeline: {str(e)}")
        exit()

    # Ch·∫°y Flask app
    print("üöÄ ƒêang kh·ªüi ƒë·ªông Flask server...")
    app.run(debug=True)
